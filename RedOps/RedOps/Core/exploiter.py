import subprocess
import json
import re
import requests
import argparse

def run_nmap_scan(target):
    print(f"[+] Running version scan on {target}...")
    result = subprocess.run(['nmap', '-sV', '-p-', target], capture_output=True, text=True)
    return result.stdout

def parse_services(nmap_output):
    services = []
    for line in nmap_output.splitlines():
        match = re.search(r'([0-9]+/tcp).*?([a-zA-Z0-9_-]+)/([a-zA-Z0-9.-]+)', line)
        if match:
            port = match.group(1).strip()
            service = match.group(2).strip()
            version = match.group(3).strip()
            services.append((port, service, version))
    return services

def load_cve_db():
    with open("core/data/local_cve_map.json", "r") as f:
        return json.load(f)

def match_cves(services, cve_db):
    matched = []
    for port, service, version in services:
        key = f"{service} {version}"
        for k in cve_db:
            if k.lower() in key.lower():
                matched.append((port, service, version, cve_db[k]))
    return matched

def search_exploitdb(term):
    try:
        result = subprocess.run(['searchsploit', term], capture_output=True, text=True)
        return result.stdout
    except FileNotFoundError:
        return "[!] searchsploit not found."

def log4shell_exploit(target):
    print(f"[!] Placeholder: Attempting Log4Shell on {target} (not active in demo)")
    return "[*] Log4Shell attempt simulated."

def run_exploiter(target):
    output = run_nmap_scan(target)
    services = parse_services(output)
    cve_db = load_cve_db()
    matches = match_cves(services, cve_db)

    for port, svc, ver, cves in matches:
        print(f"[+] {svc} {ver} on {port} is vulnerable to: {', '.join(cves)}")
        for cve in cves:
            if cve == "CVE-2021-44228":
                print(log4shell_exploit(target))
            print("[*] Searching ExploitDB...")
            print(search_exploitdb(cve))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("target", help="Target IP or domain")
    args = parser.parse_args()
    run_exploiter(args.target)